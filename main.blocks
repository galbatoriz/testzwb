<xml xmlns="https://developers.google.com/blockly/xml"><variables></variables><block type="pxt-on-start" id=";yf8e/[cOb1Jr+}7w9TN" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="{E`;r)qTc=d8^,:G2M4^"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace TestMotion {" line1="    const IICADRRESS = 0x10;" line2="    const id = &quot;245rtzf000601-1512&quot;;" line3="    let velocity = 0.26; //unit: mm/ms" line4="    let angularVelocity = 360/700; //unit: degree/ms" line5="    let tuningSpeed = 150;" line6="    export enum Dir {" line7="        //% block=&quot;vorwärts&quot;" line8="        CW = 0," line9="        //% block=&quot;rückwärts&quot;" line10="        CCW = 1" line11="    }" line12="" line13="    function writeData(buf: number[]): void {" line14="        pins.i2cWriteBuffer(IICADRRESS, pins.createBufferFromArray(buf));" line15="    }" line16="" line17="    //% blockId=id+&quot;turnLeft90&quot;" line18="    //% group=&quot;Drehen&quot;" line19="    //% block=&quot;90 Grad nach Links drehen&quot;" line20="    export function turnLeft90() {" line21="        let wait = 90 / angularVelocity;" line22="        writeData([0x00, 1, tuningSpeed]);" line23="        writeData([0x02, 0, tuningSpeed]);" line24="        basic.pause(wait);" line25="        writeData([0x00, 0, 0]);" line26="        writeData([0x02, 0, 0]);" line27="    }" line28="" line29="    //% blockId=id+&quot;turnRight90&quot;" line30="    //% group=&quot;Drehen&quot;" line31="    //% block=&quot;90 Grad nach Rechts drehen&quot;" line32="    export function turnRight90() {" line33="        let wait2 = 90 / angularVelocity;" line34="        writeData([0x00, 0, tuningSpeed]);" line35="        writeData([0x02, 1, tuningSpeed]);" line36="        basic.pause(wait2);" line37="        writeData([0x00, 0, 0]);" line38="        writeData([0x02, 0, 0]);" line39="    }" line40="" line41="    //% blockId=id+&quot;turnDegrees&quot;" line42="    //% group=&quot;Drehen&quot;" line43="    //% block=&quot;um $degrees Grad drehen&quot;" line44="    export function turnDegrees(degrees: number) {" line45="        let wait3 = degrees/angularVelocity;" line46="        writeData([0x00, 1, tuningSpeed]);" line47="        writeData([0x02, 0, tuningSpeed]);" line48="        basic.pause(wait3);" line49="        writeData([0x00, 0, 0]);" line50="        writeData([0x02, 0, 0]);" line51="    }" line52="" line53="    //% blockId=id+&quot;stopMotor&quot;" line54="    //% block=&quot;Robotor anhalten&quot;" line55="    //% group=&quot;Fahren&quot;" line56="    export function stopMotor() {" line57="        writeData([0x00, 0, 0]);" line58="        writeData([0x02, 0, 0]);" line59="    }" line60="" line61="" line62="    //% blockId=id+&quot;driveTimeNonBlocking&quot;" line63="    //% block=&quot;Für $time ms|%direction|fahren, dabei das Programm weiter laufen lassen&quot;" line64="    //% group=&quot;Erweiterte Steuerung&quot;" line65="    //% time.defl=1000" line66="    //% direction.fieldEditor=&quot;gridpicker&quot;" line67="    //% direction.fieldOptions.width=220" line68="    //% direction.fieldOptions.columns=3" line69="    export function driveTimeNonBlocking(time: number, direction: Dir) {" line70="        control.inBackground(function () {" line71="            writeData([0x00, direction, 200]);" line72="            writeData([0x02, direction, 200]);" line73="            basic.pause(time);" line74="            writeData([0x00, 0, 0]);" line75="            writeData([0x02, 0, 0]);" line76="        })" line77="    }" line78="" line79="" line80="    //% blockId=id+&quot;driveNonBlockingForeverLeftSpeed&quot;" line81="    //% block=&quot;Für immer |%direction|mit $speed Links fahren&quot;" line82="    //% group=&quot;Erweiterte Steuerung&quot;" line83="    //% direction.fieldEditor=&quot;gridpicker&quot;" line84="    //% direction.fieldOptions.width=220" line85="    //% direction.fieldOptions.columns=3" line86="    export function driveNonBlockingForeverLeftSpeed(direction: Dir, speed: number) {" line87="        writeData([0x00, direction, speed]);" line88="    }" line89="" line90="    //% blockId=id+&quot;driveNonBlockingForeverRightSpeed&quot;" line91="    //% block=&quot;Für immer |%direction|mit $speed Rechts fahren&quot;" line92="    //% group=&quot;Erweiterte Steuerung&quot;" line93="    //% direction.fieldEditor=&quot;gridpicker&quot;" line94="    //% direction.fieldOptions.width=220" line95="    //% direction.fieldOptions.columns=3" line96="    export function driveNonBlockingForeverRightSpeed(direction: Dir, speed: number) {" line97="        writeData([0x02, direction, speed]);" line98="" line99="    }" line100="" line101="    //% blockId=id+&quot;driveNonBlockingForever&quot;" line102="    //% block=&quot;Für immer |%direction|mit $speed fahren&quot;" line103="    //% group=&quot;Erweiterte Steuerung&quot;" line104="    //% direction.fieldEditor=&quot;gridpicker&quot;" line105="    //% direction.fieldOptions.width=220" line106="    //% direction.fieldOptions.columns=3" line107="    export function driveNonBlockingForever(direction: Dir, speed: number) {" line108="        writeData([0x00, direction, speed]);" line109="        writeData([0x02, direction, speed]);" line110="" line111="    }" line112="" line113="    //% blockId=id+&quot;driveTime&quot;" line114="    //% block=&quot;Für $time ms|%direction|fahren&quot;" line115="    //% group=&quot;Fahren&quot;" line116="    //% time.defl=1000" line117="    //% direction.fieldEditor=&quot;gridpicker&quot;" line118="    //% direction.fieldOptions.width=220" line119="    //% direction.fieldOptions.columns=3" line120="    export function driveTime(time: number, direction: Dir) {" line121="        writeData([0x00, direction, 200]);" line122="        writeData([0x02, direction, 200]);" line123="        basic.pause(time);" line124="        writeData([0x00, 0, 0]);" line125="        writeData([0x02, 0, 0]);" line126="    }" line127="" line128="    //% blockId=id+&quot;driveDistance&quot;" line129="    //% block=&quot;Für $distance cm fahren&quot;" line130="    //% group=&quot;Fahren&quot;" line131="    //% distance.defl=10" line132="    export function driveDistance(distance: number) {" line133="        let direction = 0;" line134="        if(distance &lt; 0) {" line135="            direction = 1;" line136="            distance = distance*(-1);" line137="        }" line138="        let wait4 = distance/velocity;" line139="        writeData([0x00, direction, 200]);" line140="        writeData([0x02, direction, 200]);" line141="        basic.pause(wait4)" line142="        writeData([0x00, 0, 0]);" line143="        writeData([0x02, 0, 0]);" line144="    }" line145="" line146="    //% blockId=id+&quot;setVelocity&quot;" line147="    //% block=&quot;1s sind $distance cm&quot;" line148="    //% group=&quot;Konfiguration&quot;" line149="    export function setVelocity(distance: number) {" line150="        velocity = distance/100; // unit: mm/ms" line151="    }" line152="" line153="    //% blockId=id+&quot;setAngularVelocity&quot;" line154="    //% block=&quot;500ms sind $degrees Grad&quot;" line155="    //% group=&quot;Konfiguration&quot;" line156="    export function setAngularVelocity(degrees: number) {" line157="        angularVelocity = degrees / 500; //unit: degree/ms" line158="    }" line159="" line160="    //% blockId=id+&quot;driveFor1000Ms&quot;" line161="    //% block=&quot;für 1s fahren&quot;" line162="    //% group=&quot;Konfiguration&quot;" line163="    export function driveFor1000Ms() {" line164="        writeData([0x00, 0, 200]);" line165="        writeData([0x02, 0, 200]);" line166="        basic.pause(1000);" line167="        writeData([0x00, 0, 0]);" line168="        writeData([0x02, 0, 0]);" line169="    }" line170="" line171="    //% blockId=id+&quot;turnFor500ms&quot;" line172="    //% block=&quot;für 500ms fahren&quot;" line173="    //% group=&quot;Konfiguration&quot;" line174="    export function turnFor500ms() {" line175="        writeData([0x00, 0, tuningSpeed]);" line176="        writeData([0x02, 1, tuningSpeed]);" line177="        basic.pause(500);" line178="        writeData([0x00, 0, 0]);" line179="        writeData([0x02, 0, 0]);" line180="    }" line181="}" numlines="182"></mutation></block></statement></block></xml>